---
export const prerender = false;

import { generateAnonymousId, getOrCreateAnonymousSession, getOrCreateUserSession } from '../utils/db';
import { setAnonymousIdCookie, getAnonymousIdFromCookie } from '../utils/auth';
import { WizardIsland } from '../components/islands/WizardIsland';

// Get authentication info from middleware
const userId = Astro.locals.userId;
const isAuthenticated = !!userId;

// Handle session management for guest vs authenticated users
let session;
let anonymousId: string | null = null;
let shouldSetCookie = false;

if (isAuthenticated && userId) {
  // Authenticated user - get or create user session
  session = await getOrCreateUserSession(userId);
} else {
  // Guest user - handle anonymous session
  const cookieHeader = Astro.request.headers.get('cookie');
  anonymousId = getAnonymousIdFromCookie(cookieHeader);
  
  if (!anonymousId) {
    // Generate new anonymous ID for first-time guest
    anonymousId = generateAnonymousId();
    shouldSetCookie = true;
  }
  
  // Get or create anonymous session
  session = await getOrCreateAnonymousSession(anonymousId);
}

// Set anonymous ID cookie for guest users
if (shouldSetCookie && anonymousId) {
  const cookieValue = setAnonymousIdCookie(anonymousId);
  Astro.response.headers.set('Set-Cookie', cookieValue);
}

// Prepare session data for the wizard
const sessionData = {
  id: session.id,
  status: session.status,
  isAuthenticated,
  userId: userId || null,
  anonymousId: anonymousId || null,
  answers: session.answers || [],
  progress: {
    totalSteps: 10, // This would come from wizard config
    completedSteps: new Set(session.answers?.map(a => a.stepId) || []).size,
    lastStepCompleted: Math.max(0, ...session.answers?.map(a => a.stepId) || [0]),
  },
};
---

<html lang="en" data-theme="appstoagents-dark">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <title>Agent Readiness Audit - Wizard</title>
  </head>
  <body class="min-h-screen bg-base-100 text-base-content antialiased">
    <!-- Navigation Bar -->
    <div class="navbar bg-base-200 border-b border-base-300/20">
      <div class="flex-1">
        <a href="/" class="btn btn-ghost text-xl font-bold text-primary hover:text-primary-focus transition-all duration-300 hover:scale-105">
          <span class="text-primary">ARA</span>
          <span class="ml-1">System</span>
        </a>
        <div class="breadcrumbs text-sm ml-4 text-base-content/70">
          <ul>
            <li><a href="/" class="hover:text-primary transition-colors duration-200 hover:scale-105">Home</a></li>
            <li><span class="text-primary font-medium">Agent Readiness Audit</span></li>
          </ul>
        </div>
      </div>
      <div class="flex-none">
        {isAuthenticated ? (
          <div class="flex gap-2 items-center">
            <div class="text-sm text-base-content/70">
              Progress saved automatically
            </div>
            <div class="dropdown dropdown-end">
              <div tabindex="0" role="button" class="btn btn-ghost btn-circle avatar">
                <div class="w-10 rounded-full">
                  <div class="bg-neutral text-neutral-content rounded-full w-10 h-10 flex items-center justify-center">
                    <span class="text-lg">ðŸ‘¤</span>
                  </div>
                </div>
              </div>
              <ul tabindex="0" class="menu menu-sm dropdown-content bg-base-100 rounded-box z-[1] mt-3 w-52 p-2 shadow">
                <li><a href="/dashboard">Dashboard</a></li>
                <li><a id="sign-out">Sign out</a></li>
              </ul>
            </div>
          </div>
        ) : (
          <div class="flex gap-2 items-center">
            <div class="text-sm text-base-content/70">
              Guest mode - <a href="#" id="save-progress-prompt" class="link">Save your progress?</a>
            </div>
            <div class="dropdown dropdown-end">
              <div tabindex="0" role="button" class="btn btn-outline btn-sm">
                Options
              </div>
              <ul tabindex="0" class="menu menu-sm dropdown-content bg-base-100 rounded-box z-[1] mt-3 w-52 p-2 shadow">
                <li><a id="create-account-link" href="/sign-up">Create Account</a></li>
                <li><a href="/sign-in">Sign In</a></li>
                <li><a id="email-capture-link" href="#">Email Results</a></li>
              </ul>
            </div>
          </div>
        )}
      </div>
    </div>

    <!-- Progress Bar -->
    <div class="bg-base-200 px-6 py-8 border-b border-base-300/20">
      <div class="max-w-4xl mx-auto">
        <div class="flex items-center justify-between mb-6">
          <div>
            <h1 class="text-3xl font-bold text-base-content mb-2">
              Agent Readiness Assessment
            </h1>
            <p class="text-base text-base-content/80 max-w-2xl leading-relaxed">
              Complete this comprehensive audit to assess your AI agent implementation readiness and unlock actionable insights
            </p>
          </div>
          <div class="text-right">
            <div>
              <div class="text-4xl font-bold text-primary">
                Step {sessionData.progress.lastStepCompleted + 1}
              </div>
              <div class="text-sm text-base-content/70 mt-1">of {sessionData.progress.totalSteps} total</div>
            </div>
          </div>
        </div>
        
        <!-- Progress Bar -->
        <div>
          <div class="h-4 bg-base-300 rounded-full overflow-hidden">
            <div 
              class="h-full bg-primary rounded-full transition-all duration-300"
              style={`width: ${Math.round((sessionData.progress.completedSteps / sessionData.progress.totalSteps) * 100)}%`}
            >
            </div>
          </div>
          <div class="flex justify-between text-sm text-base-content/80 mt-4">
            <span class="font-medium flex items-center gap-2">
              <span class="w-2 h-2 bg-primary rounded-full"></span>
              {sessionData.progress.completedSteps} of {sessionData.progress.totalSteps} completed
            </span>
            <span class="font-bold text-primary text-lg">
              {Math.round((sessionData.progress.completedSteps / sessionData.progress.totalSteps) * 100)}%
            </span>
          </div>
        </div>
      </div>
    </div>

    <!-- Main Wizard Content -->
    <div class="container mx-auto px-4 py-8">
      <div class="max-w-4xl mx-auto">
        <div class="bg-base-100 rounded-lg border border-base-300/20">
          <!-- Astro Island for React Component -->
          <WizardIsland 
            sessionData={sessionData}
            client:load
          />
        </div>
      </div>
    </div>

    <!-- Email Capture Modal -->
    <dialog id="email-capture-modal" class="modal">
      <div class="modal-box max-w-lg bg-base-100 border border-base-300/30">
        <div class="text-center mb-6">
          <div class="w-16 h-16 bg-primary/20 rounded-full flex items-center justify-center mx-auto mb-4">
            <span class="text-2xl">ðŸ“§</span>
          </div>
          <h3 class="font-bold text-xl text-base-content">
            Get Your Results via Email
          </h3>
        </div>
        <p class="text-base-content/80 text-center mb-6 leading-relaxed">
          Enter your email address to receive your audit results and recommendations.
          This won't create an account, just delivers your report.
        </p>
        <div class="form-control w-full">
          <label class="label">
            <span class="label-text font-medium">Email address</span>
          </label>
          <input 
            type="email" 
            id="email-input"
            placeholder="your.email@company.com" 
            class="input input-bordered w-full bg-base-200/50 backdrop-blur-sm border-base-300/30 focus:border-primary focus:bg-base-100 transition-all duration-300" 
          />
        </div>
        <div class="modal-action justify-center pt-6">
          <form method="dialog" class="flex gap-3">
            <button class="btn btn-ghost hover:bg-base-200 transition-colors duration-300">Cancel</button>
            <button id="submit-email" class="btn btn-primary">
              <span class="mr-2">ðŸ“¤</span>
              Send Results
            </button>
          </form>
        </div>
      </div>
    </dialog>

    <!-- Account Creation Prompt Modal -->
    <dialog id="account-prompt-modal" class="modal">
      <div class="modal-box">
        <h3 class="font-bold text-lg">Save Your Progress</h3>
        <p class="py-4">
          Create a free account to save your progress, access your results anytime, 
          and get additional features like progress tracking and personalized recommendations.
        </p>
        <div class="bg-base-200 p-4 rounded-lg mb-4">
          <h4 class="font-semibold mb-2">What you'll get:</h4>
          <ul class="list-disc list-inside text-sm space-y-1">
            <li>Secure progress saving across devices</li>
            <li>Access to detailed analytics</li>
            <li>Downloadable PDF reports</li>
            <li>Progress tracking over time</li>
          </ul>
        </div>
        <div class="modal-action">
          <form method="dialog">
            <button class="btn">Continue as Guest</button>
            <a href="/sign-up" class="btn btn-primary ml-2">Create Account</a>
          </form>
        </div>
      </div>
    </dialog>

    <!-- Scripts -->
    <script>
      import { Clerk } from '@clerk/clerk-js';
      
      const publishableKey = import.meta.env.PUBLIC_CLERK_PUBLISHABLE_KEY;
      
      if (publishableKey) {
        // Wrap in async function to avoid top-level await
        (async () => {
          const clerk = new Clerk(publishableKey);
          await clerk.load();
          
          // Handle sign out
          const signOutBtn = document.getElementById('sign-out');
          if (signOutBtn) {
            signOutBtn.addEventListener('click', async () => {
              await clerk.signOut();
              window.location.href = '/';
            });
          }
        })();
      }

      // Handle email capture
      const emailCaptureLink = document.getElementById('email-capture-link');
      const emailModal = document.getElementById('email-capture-modal');
      const emailInput = document.getElementById('email-input');
      const submitEmailBtn = document.getElementById('submit-email');

      if (emailCaptureLink && emailModal) {
        emailCaptureLink.addEventListener('click', (e) => {
          e.preventDefault();
          emailModal.showModal();
        });
      }

      if (submitEmailBtn && emailInput) {
        submitEmailBtn.addEventListener('click', async (e) => {
          e.preventDefault();
          const email = emailInput.value.trim();
          
          if (!email) {
            alert('Please enter a valid email address');
            return;
          }

          try {
            // Store email for future report delivery
            const response = await fetch('/api/guest/save-email', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ 
                email,
                sessionId: JSON.parse(document.getElementById('wizard-container').dataset.session).id
              }),
            });

            if (response.ok) {
              emailModal.close();
              // Show success message
              const toast = document.createElement('div');
              toast.className = 'toast toast-top toast-end';
              toast.innerHTML = `
                <div class="alert alert-success">
                  <span>âœ… Email saved! Results will be sent when you complete the audit.</span>
                </div>
              `;
              document.body.appendChild(toast);
              setTimeout(() => toast.remove(), 3000);
            } else {
              throw new Error('Failed to save email');
            }
          } catch (error) {
            console.error('Error saving email:', error);
            alert('Failed to save email. Please try again.');
          }
        });
      }

      // Handle account creation prompt
      const saveProgressPrompt = document.getElementById('save-progress-prompt');
      const accountModal = document.getElementById('account-prompt-modal');

      if (saveProgressPrompt && accountModal) {
        saveProgressPrompt.addEventListener('click', (e) => {
          e.preventDefault();
          accountModal.showModal();
        });
      }

      // Auto-prompt for account creation at 50% completion
      const sessionData = JSON.parse(document.getElementById('wizard-container').dataset.session);
      const completionPercentage = (sessionData.progress.completedSteps / sessionData.progress.totalSteps) * 100;
      
      if (!sessionData.isAuthenticated && completionPercentage >= 50 && !localStorage.getItem('account-prompt-shown')) {
        setTimeout(() => {
          if (accountModal) {
            accountModal.showModal();
            localStorage.setItem('account-prompt-shown', 'true');
          }
        }, 2000);
      }
    </script>

  </body>
</html>