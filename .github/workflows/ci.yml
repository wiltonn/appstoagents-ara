name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Quality checks and testing
  quality:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ara_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ara_test
        run: |
          pnpm prisma generate
          pnpm prisma db push --force-reset

      - name: Run linting
        run: pnpm lint

      - name: Run type checking
        run: pnpm type-check

      - name: Run unit tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ara_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
        run: pnpm test:unit

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ara_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
        run: pnpm test:integration

      - name: Build application
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ara_test
          SKIP_ENV_VALIDATION: true
        run: pnpm build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: |
            dist/
            .next/
          retention-days: 7

  # End-to-end testing
  e2e:
    name: E2E Testing
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm playwright install --with-deps

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}

      - name: Run E2E tests
        env:
          CI: true
          PLAYWRIGHT_TEST_BASE_URL: http://localhost:3000
        run: pnpm test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ github.sha }}
          path: |
            playwright-report/
            test-results/
          retention-days: 7

  # Security scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run dependency vulnerability scan
        uses: github/super-linter@v5
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_TYPESCRIPT_ES: true
          VALIDATE_JAVASCRIPT_ES: true
          VALIDATE_JSON: true
          VALIDATE_YAML: true

      - name: Run Snyk security scan
        if: github.event_name == 'push'
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Database migration validation
  migration:
    name: Database Migration Validation
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ara_migration_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Validate database migrations
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ara_migration_test
        run: |
          pnpm prisma generate
          pnpm prisma db push --force-reset
          
      - name: Test migration rollback
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ara_migration_test
        run: |
          pnpm prisma migrate reset --force
          pnpm prisma db push

  # Notification of results
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [quality, e2e, security, migration]
    if: always()
    
    steps:
      - name: Notify success
        if: ${{ needs.quality.result == 'success' && needs.e2e.result == 'success' && needs.security.result == 'success' }}
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#ara-deployment'
          message: |
            ✅ CI Pipeline passed for ${{ github.ref }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            Ready for deployment!
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify failure
        if: ${{ needs.quality.result == 'failure' || needs.e2e.result == 'failure' || needs.security.result == 'failure' }}
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#ara-deployment'
          message: |
            ❌ CI Pipeline failed for ${{ github.ref }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            Check the logs for details.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}